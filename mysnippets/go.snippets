
snippet todo "TODO" !b
//TODO: Max <max.lavrenov@optiopay.com> ${0}
endsnippet

snippet errp "Error return pair" !b
if err != nil {
	return nil, err
}
${0}
endsnippet

snippet errlp "Error panic" !b
if err != nil {
	log.Panic(err)
}
${0}
endsnippet


snippet lf "log.Printf variable"
log.Printf("${1} = %+v\n", $1)
endsnippet


snippet bp "godebug breakpoint"
_ = "breakpoint"
endsnippet


snippet goplay "template for go playground" !b

package main

import "fmt"

func main() {
	fmt.Println("Hello, playground")
}

endsnippet

snippet help "help field"
\`help:"${1:displayName}"\`
endsnippet


#сниппеты цветов
#
# Как они вообще работают
# Есть простая 16 цветная палитра , и есть 256 цветная
# для 16 цветной
# \x1B[31;1m ${1:text}\x1B[0m
# здесь 31 означает цвет ( они могут быть от 30 до 37 )
# а 1 - доп параметр. Например 1 - означает bold . Еще там могут быть всякие мигания и проч ерунда
#
# для 256 палитры
# \x1B[38;5;12;1m text %s \x1B[0m
# 38;5  - означают 256 цветную палитру
# 12 - цвет  ( могут быть от 1 до 256)
# 1 - доп параметры ( тут 1 это болд )
#


snippet ered
"\x1B[31;1m ${1:text}\x1B[0m"
endsnippet

snippet egreen
"\x1B[32;1m ${1:text}\x1B[0m"
endsnippet

snippet eyellow
"\x1B[33;1m ${1:text}\x1B[0m"
endsnippet

snippet eblue
"\x1B[34;1m ${1:text}\x1B[0m"
endsnippet

snippet emagenta
"\x1B[35;1m ${1:text}\x1B[0m"
endsnippet

snippet ecyan
"\x1B[36;1m ${1:text}\x1B[0m"
endsnippet

snippet ewhite
"\x1B[37;1m ${1:text}\x1B[0m"
endsnippet



snippet lred
log.Printf("\x1B[31;1m ${0}\x1B[0m")
endsnippet

snippet lgreen
log.Printf("\x1B[32;1m ${0}\x1B[0m")
endsnippet

snippet lyellow
log.Printf("\x1B[33;1m ${0}\x1B[0m")
endsnippet

snippet lblue
log.Printf("\x1B[34;1m ${0}\x1B[0m")
endsnippet

snippet lmagenta
log.Printf("\x1B[35;1m ${0}\x1B[0m")
endsnippet

snippet lcyan
log.Printf("\x1B[36;1m ${0}\x1B[0m")
endsnippet

snippet lwhite
log.Printf("\x1B[37;1m ${0}\x1B[0m")
endsnippet


# комбинация цветов и lf

snippet lfred
log.Printf("\x1B[31;1m ${1}\x1B[0m = %+v", $1)
endsnippet

snippet lfgreen
log.Printf("\x1B[32;1m ${1}\x1B[0m = %+v", $1)
endsnippet

snippet lfyellow
log.Printf("\x1B[33;1m ${1}\x1B[0m = %+v", $1)
endsnippet

snippet lfblue
log.Printf("\x1B[34;1m ${1}\x1B[0m = %+v", $1)
endsnippet

snippet lfmagenta
log.Printf("\x1B[35;1m ${1}\x1B[0m = %+v", $1)
endsnippet

snippet lfcyan
log.Printf("\x1B[36;1m ${1}\x1B[0m = %+v", $1)
endsnippet

snippet lfwhite
log.Printf("\x1B[37;1m ${1}\x1B[0m = %+v", $1)
endsnippet


# комбинация цветов и ff

snippet ffred
fmt.Printf("\x1B[31;1m ${1}\x1B[0m = %+v\n", $1)
endsnippet

snippet ffgreen
fmt.Printf("\x1B[32;1m ${1}\x1B[0m = %+v\n", $1)
endsnippet

snippet ffyellow
fmt.Printf("\x1B[33;1m ${1}\x1B[0m = %+v\n", $1)
endsnippet

snippet ffblue
fmt.Printf("\x1B[34;1m ${1}\x1B[0m = %+v\n", $1)
endsnippet

snippet ffmagenta
fmt.Printf("\x1B[35;1m ${1}\x1B[0m = %+v\n", $1)
endsnippet

snippet ffcyan
fmt.Printf("\x1B[36;1m ${1}\x1B[0m = %+v\n", $1)
endsnippet

snippet ffwhite
fmt.Printf("\x1B[37;1m ${1}\x1B[0m = %+v\n", $1)
endsnippet

# комбинация цветов и fn

snippet fnred
fmt.Println("\x1B[31;1m ${1}\x1B[0m")
endsnippet

snippet fngreen
fmt.Println("\x1B[32;1m ${1}\x1B[0m")
endsnippet

snippet fnyellow
fmt.Println("\x1B[33;1m ${1}\x1B[0m")
endsnippet

snippet fnblue
fmt.Println("\x1B[34;1m ${1}\x1B[0m")
endsnippet

snippet fnmagenta
fmt.Println("\x1B[35;1m ${1}\x1B[0m")
endsnippet

snippet fncyan
fmt.Println("\x1B[36;1m ${1}\x1B[0m")
endsnippet

snippet fnwhite
fmt.Println("\x1B[37;1m ${1}\x1B[0m")
endsnippet

# go convey

snippet ctest
func Test$1(t *testing.T) {
	Convey("$2", t, func() {
		$3
	})
}
endsnippet

snippet conv
Convey("$1", func() {
	$2
})
endsnippet

snippet sbe
So($1, ShouldEqual, $2)
endsnippet

snippet sbn
So($1, ShouldBeNil)
endsnippet

snippet sbt
So($1, ShouldBeTrue)
endsnippet

snippet sbf
So($1, ShouldBeFalse)
endsnippet



