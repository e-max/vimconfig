

snippet #u
	# -*- coding: utf-8 -*-

# New Class
snippet cls
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4

		def __repr__(self):
			return u"%s(${6})" % (self.__class__.__name__, ${7:%()}

		${8}

snippet il
	import logging

snippet gl
	logger = logging.getLogger("${1:logger}")

snippet ld
	logger.debug(u"${1:log}")

snippet li
	logger.info(u"${1:log}")

snippet lw
	logger.warning(u"${1:log}")

snippet le
	logger.error(u"${1:log}")

snippet lex
	logger.exception(u"${1:log}")

#сниппеты для написания документации
snippet :p
	:param ${1:name}: ${2:description}
snippet :t
	:type ${1:type}: ${2:description}
snippet :r
	:return ${1:description}
snippet :rt
	:rtype ${1:description}



snippet ered
	"\x1B[31;1m ${1:text}\x1B[0m"
snippet egreen
	"\x1B[32;1m ${1:text}\x1B[0m"
snippet eyellow
	"\x1B[33;1m ${1:text}\x1B[0m"
snippet eblue
	"\x1B[34;1m ${1:text}\x1B[0m"
snippet emagenta
	"\x1B[35;1m ${1:text}\x1B[0m"
snippet ecyan
	"\x1B[36;1m ${1:text}\x1B[0m"
snippet ewhite
	"\x1B[37;1m ${1:text}\x1B[0m"


snippet pred
	print "\x1B[31;1m ${1:text}\x1B[0m"${2:, }${3:}
snippet pgreen
	print "\x1B[32;1m ${1:text}\x1B[0m"${2:, }${3:}
snippet pyellow
	print "\x1B[33;1m ${1:text}\x1B[0m"${2:, }${3:}
snippet pblue
	print "\x1B[34;1m ${1:text}\x1B[0m"${2:, }${3:}
snippet pmagenta
	print "\x1B[35;1m ${1:text}\x1B[0m"${2:, }${3:}
snippet pcyan
	print "\x1B[36;1m ${1:text}\x1B[0m"${2:, }${3:}
snippet pwhite
	print "\x1B[37;1m ${1:text}\x1B[0m"${2:, }${3:}



snippet idf
	from twisted.internet import defer
snippet idfr
	from twisted.internet import defer, reactor
